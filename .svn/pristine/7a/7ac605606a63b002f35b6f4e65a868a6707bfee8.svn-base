package com.nuvolect.photoshield.main;//

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.widget.Toast;

import com.nuvolect.photoshield.license.LicenseManager;
import com.nuvolect.photoshield.license.LicensePersist;
import com.nuvolect.photoshield.util.TimeUtil;

import java.util.ArrayList;
import java.util.List;

/**
 * Manage a list of developer commands.  This dialog is only displayed for users on the whitelist.
 */
public class DeveloperDialog {

    private static Activity m_act;
    /**
     * True when the developers menu is disabled, ie demos and videos
     */
    private static boolean m_developerIsEnabled = true;

    public static boolean isEnabled() {
        return m_developerIsEnabled;
    }

    /**
     * Developer menu: in menu order.  Replaces '_' with ' ' on menu.
     */
    public static enum DevMenu {
        Free_user_toggle,
        Temporary_disable_developer_menu,
        Start_eval_expired_dialog,
        Decrement_eval_start_1_Day,
        Increment_eval_start_1_day,
        Decrement_app_version,
    };

    public static void start(Activity act) {

        m_act = act;

        final List<String> stringMenu = new ArrayList<String>();

        for( DevMenu menuItem : DevMenu.values()){

            String item = menuItem.toString().replace('_', ' ');
            stringMenu.add( item);
        }
        final CharSequence[] items = stringMenu.toArray(new CharSequence[stringMenu.size()]);

        AlertDialog.Builder builder = new AlertDialog.Builder(m_act);
        builder.setTitle("Developer Menu")
                .setItems( items, new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {

                        DevMenu menuItem = DevMenu.values()[which];

                        switch( menuItem){

                            case Free_user_toggle:{

                                LicenseManager.getInstance(m_act).mIsPremium = ! LicenseManager.getInstance(m_act).mIsPremium;
                                Toast.makeText(m_act, "Is premium user: " + LicenseManager.getInstance(m_act).mIsPremium, Toast.LENGTH_LONG).show();
                                break;
                            }
                            case Temporary_disable_developer_menu:
                                m_developerIsEnabled = false;
                                m_act.invalidateOptionsMenu();
                                break;
                            case Start_eval_expired_dialog:
                                LicenseManager.getInstance(m_act).evalExpiredDialog(m_act);
                                break;
                            case Decrement_eval_start_1_Day: {
                                long evalStart = LicensePersist.getEvalStartTime(m_act);
                                evalStart -= 24 * 60 * 60 * 1000L;
                                LicensePersist.setEvalStartTime(m_act, evalStart);
                                Toast.makeText(m_act, "Eval back 1 day to: " + TimeUtil.friendlyTimeString(evalStart), Toast.LENGTH_LONG).show();
                                Toast.makeText(m_act, ""+LicensePersist.getLicenseSummary(m_act), Toast.LENGTH_LONG).show();
                                break;
                            }
                            case Increment_eval_start_1_day: {
                                long evalStart = LicensePersist.getEvalStartTime(m_act);
                                evalStart += 24 * 60 * 60 * 1000L;
                                LicensePersist.setEvalStartTime(m_act, evalStart);
                                Toast.makeText(m_act, "Eval forward 1 day to: " + TimeUtil.friendlyTimeString(evalStart), Toast.LENGTH_LONG).show();
                                Toast.makeText(m_act, ""+LicensePersist.getLicenseSummary(m_act), Toast.LENGTH_LONG).show();
                                break;
                            }
                            case Decrement_app_version:{

                                int appVersion = LicensePersist.getAppVersion(m_act);
                                if( --appVersion < 1)
                                    appVersion = 1;
                                LicensePersist.setAppVersion(m_act, appVersion);
                                Toast.makeText(m_act, "App version: " + appVersion, Toast.LENGTH_LONG).show();
                                break;
                            }
                            default:
                                break;
                        }
                    }
                });
        AlertDialog alert = builder.create();
        alert.show();
    }
}
